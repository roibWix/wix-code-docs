{ "name": "Captcha",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 8,
      "filename": "Captcha.js" },
  "docs":
    { "summary": "Captcha allow users to present google captcha and verify its not a bot.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels":
          [ "removed" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 54,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Gets the reCAPTCHA token.",
            "description":
              [ "When a site visitor successfully completes a reCAPTCHA challenge, a reCAPTCHA `token`",
                " is generated. The token is used for backend authorization.",
                "",
                " Prior to completing the reCAPTCHA challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified reCAPTCHA",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full reCAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the site visitor completes the reCAPTCHA\n challenge and the reCAPTCHA is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha errors." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "lineno": 28,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component onError event is triggered.",
            "description":
              [ "The Captcha component may gat into error state (when not connected to the network) and this event will be triggered" ],
            "links":
              [ "[onError( )](#onError)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha timeout." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "lineno": 52,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component timeout event is triggered.",
            "description":
              [ "Once The Captcha challenge has been completed by the user the given token has 120 sec life time, once 120 sec has passed",
                " without BE verification of the token onTimout event is triggered and the token expires." ],
            "links":
              [ "[onTimeout( )](#onTimeout)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha is verified." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "lineno": 80,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component onVerified event is triggered.",
            "description":
              [ "Once The Captcha challenge has been completed by the user the onVerified callback is triggered." ],
            "links":
              [ "[onVerified( )](#onVerified)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the reCAPTCHA has been reset." },
        "locations":
          [ { "lineno": 78,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Resets the reCAPTCHA challenge.",
            "description":
              [ "`reset()` the reCAPTCHA when there is a reCAPTCHA error. Also use `reset()`",
                "when the operation restricted by the reCAPTCHA element is successfully completed",
                "to enable the reCAPTCHA for the next operation." ],
            "links": [],
            "examples":
              [ { "title": "Reset the reCAPTCHA element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full reCAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the site visitor completes the reCAPTCHA\n challenge and the reCAPTCHA is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 118,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 162,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerificationHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 192,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 210,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }