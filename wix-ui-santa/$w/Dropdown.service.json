{ "name": "Dropdown",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 22,
      "filename": "Dropdown.js" },
  "docs":
    { "summary": "Dropdowns are used for selecting one of a number of options.\n They are especially useful when there are too many options to display using\n [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list\n of [options](#Option). Each [option](#Option) contains a label, which is\n what the user sees, and a value, which is what is used in code and stored in\n you collections.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Dropdown.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 54,
              "filename": "Dropdown.js" },
            { "lineno": 96,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the options in a dropdown.",
            "description":
              [ "Setting the `options` property sets all the [options](#Option)",
                " available to a user.",
                "",
                " Set `options` to an empty array (`[]`) to remove the current dropdown options.",
                "",
                " Getting the `options` property returns the current",
                " list of [options](#Option) available to a user.",
                "",
                " You cannot modify the options array in-place. To add, change, or remove",
                " individual dropdown options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the options array.",
                "   1. Reset the `options` property with the modified array." ],
            "links":
              [ "[Option](#Option)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 149,
              "filename": "Dropdown.js" },
            { "lineno": 174,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the dropdown's placeholder text.",
            "description":
              [ "Placeholder text is typically used to",
                " provide a hint to the user describing what the dropdown is for.",
                " When the user chooses an option, the placeholder text disappears." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 208,
              "filename": "Dropdown.js" },
            { "lineno": 239,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the index of the selected option.",
            "description":
              [ "Setting the `selectedIndex` property sets the option at",
                " that index to be the selected option. To set one of the options to be",
                " selected, set the `selectedIndex` property to an index between `0` and",
                " `options.length - 1`.",
                "",
                " To reset the dropdown to have no option",
                " selected, set the `selectedIndex` property to `undefined`.",
                "",
                " Getting the `selectedIndex` property returns the index of",
                " the currently selected option. If no value is selected, the",
                " `selectedIndex` property returns `undefined`." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 337,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the dropdown's styles.",
            "description":
              [ "The following styles can be used with dropdowns:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a dropdown's styles, gets or sets the styles of the",
                " dropdown's regular state. It does not set the styles of the dropdown's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 273,
              "filename": "Dropdown.js" },
            { "lineno": 305,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a dropdown's `value` in code does not trigger an `onChange` event.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Option",
        "locations":
          [ { "lineno": 44,
              "filename": "Dropdown.js" } ],
        "docs":
          { "summary": "An object used by the `options` property that contains the attributes of a dropdown list item.",
            "links":
              [ "[options](#Options)",
                "[value](#value)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the dropdown option. This is what you use in code and is what is stored in your collections." },
            { "name": "label",
              "type": "string",
              "doc": "The label of the dropdown option. This is what a user sees.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }