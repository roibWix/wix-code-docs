{ "name": "VideoPlayer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 8,
      "filename": "VideoPlayer.js" },
  "docs":
    { "summary": "An element for presenting videos.",
      "description":
        [ "A video player allows you to present video from:",
          "",
          " + Dailymotion",
          " + Facebook",
          " + Twitch",
          " + Vimeo",
          " + YouTube",
          " + Videos uploaded to your site",
          " + Any online .mp4 file" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentTime",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 141,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Gets the current play time from the beginning of the current video, in seconds.",
            "description":
              [ "To set the `currentTime` property, use the [`seek()`](#seek) function." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "description",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 75,
              "filename": "VideoPlayer.js" },
            { "lineno": 98,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the description of a video.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Setting a video description only works when a video player is presenting a\n video uploaded to your site.\n\n Getting a video description does not work when a video player is presenting a\n video from Facebook, Twitch, or YouTube." ] } },
      { "name": "duration",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 162,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Gets the total play time of the current video, in seconds.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isMuted",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 233,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Indicates if the volume is currently muted.",
            "description":
              [ "To set the `isMuted` property, use the [`mute()`](#mute)",
                " and [`unmute()`](#unmute) functions." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isPlaying",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 119,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Indicates if a video is currently playing.",
            "description":
              [ "To set the `isPlaying` property, use the [`play()`](#play),",
                " [`pause()`](#pause), and [`stop()`](#stop) functions." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "poster",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 352,
              "filename": "VideoPlayer.js" },
            { "lineno": 389,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "description":
              [ "Setting the `poster` property changes the displayed poster to",
                " the poster found at the new `poster` value.",
                "",
                " Getting the `poster` property returns the location of the",
                " current poster media file.",
                "",
                " The media file is one of the following:",
                "",
                " + A image from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.",
                "   URL Format: `wix:image://v1/<image_uri>/<filename>#originWidth=<width>&originHeight=<height>`",
                " + An external image URL.",
                "   URL Format: `http(s)://site.com/image-file.jpg`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 255,
              "filename": "VideoPlayer.js" },
            { "lineno": 301,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the file location of the current video.",
            "description":
              [ "Setting the `src` property changes the displayed video to",
                " the video found at the new `src` value.",
                "",
                " Getting the `src` property returns the location of the",
                " current video file.",
                "",
                " The video file is one of the following:",
                "",
                " + A video from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.",
                "   URL Format: `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>`",
                " + A video from a video sharing site.",
                "   URL Format: `https://www.site.com/video-path`",
                " + An external video URL.",
                "   URL Format: `http(s)://site.com/video-file.mp4`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "title",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 31,
              "filename": "VideoPlayer.js" },
            { "lineno": 54,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the title displayed in a video player.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Setting a video title only works when a video player is presenting a\n video uploaded to your site.\n\n Getting a video title does not work when a video player is presenting a\n video from Facebook, Twitch, or YouTube." ] } },
      { "name": "volume",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 181,
              "filename": "VideoPlayer.js" },
            { "lineno": 211,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the video player volume.",
            "description":
              [ "Setting the `volume` property sets the video player's percentage of total",
                " volume. Set the value to a number between `0` and `100`.",
                "",
                " Getting the `volume` property returns the video player's current",
                " percentage of total volume." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The actual volume heard by a site visitor depends on the value of the\n `volume` property and the volume settings on the visitor's device." ] } } ],
  "operations":
    [ { "name": "mute",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been muted." },
        "locations":
          [ { "lineno": 536,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Mutes video volume.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onEnded",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video has ended." } ],
        "ret":
          { "type": "$w.VideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 682,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback has ended.",
            "description":
              [ "A video ends when playback reaches the [`duration`](#duration) of the video." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onEnded" } },
      { "name": "onPause",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video is paused." } ],
        "ret":
          { "type": "$w.VideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 643,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is paused.",
            "description":
              [ "A video can be paused by a user clicking the video player's",
                " pause button or by calling its [`pause()`](#pause) or [`stop()`](#stop) functions." ],
            "links":
              [ "[pause( )](#pause)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPause" } },
      { "name": "onPlay",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video is played." } ],
        "ret":
          { "type": "$w.VideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 604,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is started or restarted.",
            "description":
              [ "A video can be played by a user clicking the video player's",
                " play button or by calling its [`play()`](#play) function." ],
            "links":
              [ "[play( )](#play)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPlay" } },
      { "name": "onProgress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video progresses." } ],
        "ret":
          { "type": "$w.VideoPlayer" },
        "locations":
          [ { "lineno": 719,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback progresses.",
            "description":
              [ "A video continually progresses as the video plays." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onProgress" } },
      { "name": "pause",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been paused." },
        "locations":
          [ { "lineno": 456,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `pause()` function pauses the current video and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the vido player by the [onPause( )](#onPause)",
                " function or in the Editor are called." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback begins or resumes." },
        "locations":
          [ { "lineno": 432,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Begins or resumes playback.",
            "description":
              [ "The `play()` function plays the current video and fires a `play` event.",
                "",
                " The `play` event handlers set on the video player by the [onPlay( )](#onPlay)",
                " function or in the Editor are called." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "seek",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the playback has been moved to the specified time." },
        "locations":
          [ { "lineno": 574,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Moves playback to the specified time, in seconds.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stop",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been stopped." },
        "locations":
          [ { "lineno": 480,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `stop()` function stops the current video and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the video player by the [onPause( )](#onPause)",
                " function or in the Editor are called." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The `stop()` function does not work when a video player is presenting a\n video from Dailymotion, Facebook, or Twitch." ] } },
      { "name": "togglePlay",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been toggled." },
        "locations":
          [ { "lineno": 507,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Toggles playback.",
            "description":
              [ "The `togglePlay()` function either pauses or plays the current video based",
                " on its current state:",
                "",
                " + If the video is paused, it plays and a `play` event is fired. The",
                "   `play` event handlers set on the video player by the [onPlay( )](#onPlay)",
                "   function or in the Editor are called.",
                " + If the video is playing, it is paused and a `pause` event is fired. The",
                "   `pause` event handlers set on the video player by the [onPause( )](#onPause)",
                "   function or in the Editor are called." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "unmute",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been unmuted." },
        "locations":
          [ { "lineno": 555,
              "filename": "VideoPlayer.js" } ],
        "docs":
          { "summary": "Unmutes video volume.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }